<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FrameRateTask</name>
    </assembly>
    <members>
        <member name="T:FrameRateTask.TaskNotFinishedException">
            <summary>
            This exception will be throwed when the task hasn't finished but is asked to get the return value.
            </summary>
        </member>
        <member name="P:FrameRateTask.TaskNotFinishedException.Message">
            
        </member>
        <member name="T:FrameRateTask.IllegalTimeIntervalException">
            <summary>
            This exception will be throwed when the time interval specified is invalid.
            </summary>
        </member>
        <member name="P:FrameRateTask.IllegalTimeIntervalException.Message">
            
        </member>
        <member name="T:FrameRateTask.TimeExceedException">
            <summary>
            This exception will be throwed when time exceeds but time exceeding is not allowed.
            </summary>
        </member>
        <member name="P:FrameRateTask.TimeExceedException.Message">
            
        </member>
        <member name="T:FrameRateTask.TaskStartedMoreThanOnceException">
            <summary>
            This exception will be throwed when the task has been started but is asked to be started again.
            </summary>
        </member>
        <member name="P:FrameRateTask.TaskStartedMoreThanOnceException.Message">
            
        </member>
        <member name="T:FrameRateTask.FrameRateTaskExecutor`1">
            <summary>
            The class intends to execute a task that need to be executed repeatedly every less than one second and need to be accurate.
            </summary>
            <typeparam name="TResult">The type of the return value of the task.</typeparam>
        </member>
        <member name="P:FrameRateTask.FrameRateTaskExecutor`1.FrameRate">
            <summary>
            The actual framerate recently.
            </summary>
        </member>
        <member name="P:FrameRateTask.FrameRateTaskExecutor`1.Finished">
            <summary>
            Gets a value indicating whether or not the task has finished.
            </summary>
            <returns>
            true if the task has finished; otherwise, false.
            </returns>
        </member>
        <member name="P:FrameRateTask.FrameRateTaskExecutor`1.HasExecuted">
            <summary>
            Gets a value indicating whether or not the task has started.
            </summary>
            <returns>
            true if the task has started; otherwise, false.
            </returns>
        </member>
        <member name="P:FrameRateTask.FrameRateTaskExecutor`1.Result">
            <summary>
            Get the return value of this task.
            </summary>
            <exception cref="T:FrameRateTask.TaskNotFinishedException">
            	The task hasn't finished.
            </exception>
        </member>
        <member name="P:FrameRateTask.FrameRateTaskExecutor`1.AllowTimeExceed">
            <summary>
            Gets or sets whether it allows time exceeding.
            </summary>
            <remarks>
            If this property is false, the task will throw a TimeExceed exception when the task cannot finish in the given time.
            The default value is true.
            </remarks>
        </member>
        <member name="P:FrameRateTask.FrameRateTaskExecutor`1.TimeExceedAction">
            <summary>
            It will be called once time exceeds if AllowTimeExceed is set true.
            </summary>
            <remarks>
            parameter bool: If it is called because of the number of time exceeding is greater than MaxTimeExceedCount, the argument is true; if it is called because of exceeding once, the argument is false.
            </remarks>
        </member>
        <member name="P:FrameRateTask.FrameRateTaskExecutor`1.BeginTickCount">
            <summary>
            The TickCount when beginning the loop,
            </summary>
        </member>
        <member name="P:FrameRateTask.FrameRateTaskExecutor`1.LastLoopEndingTickCount">
            <summary>
            The TickCount should be when ending last loop.
            </summary>
        </member>
        <member name="P:FrameRateTask.FrameRateTaskExecutor`1.MaxTolerantTimeExceedCount">
            <summary>
            Gets or sets the maximum count of time exceeding continuously.
            </summary>
            <remarks>
            The value is 5 for default.
            </remarks>
        </member>
        <member name="M:FrameRateTask.FrameRateTaskExecutor`1.Start">
            <summary>
            Start this task synchronously.
            </summary>
            <exception cref="T:FrameRateTask.TaskStartedMoreThanOnceException">
            the task has been started.
            </exception>
        </member>
        <member name="M:FrameRateTask.FrameRateTaskExecutor`1.TryStart">
            <summary>
            Try to start this task synchronously.
            </summary>
            <returns>
            true if the task is started successfully; false if the task has been started.
            </returns>
        </member>
        <member name="M:FrameRateTask.FrameRateTaskExecutor`1.#ctor(System.Func{System.Boolean},System.Func{System.Boolean},System.Int64,System.Func{`0},System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="loopCondition">If you want to continue to loop, return true; otherwise return false.</param>
            <param name="loopToDo">If you want to break out, return false; otherwise, return true.</param>
            <param name="timeInterval"></param>
            <param name="finallyReturn">The return value. It will be called after the loop.</param>
            <param name="maxTotalDuration">The maximum time for the loop to execute.</param>
        </member>
        <member name="M:FrameRateTask.FrameRateTaskExecutor`1.#ctor(System.Func{System.Boolean},System.Action,System.Int64,System.Func{`0},System.Int64)">
            <summary>
            Constructor
            </summary>
            <param name="loopCondition">If you want to continue to loop, return true; otherwise return false.</param>
            <param name="loopToDo">Loop to do.</param>
            <param name="timeInterval"></param>
            <param name="finallyReturn">The return value. It will be called after the loop.</param>
            <param name="maxTotalDuration">The maximum time for the loop to execute.</param>
        </member>
    </members>
</doc>
